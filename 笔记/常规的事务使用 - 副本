常规的事务使用

更新表A，更新表B，提交

ps:
	1. 不同事务操作同一行记录，会加锁等待?
	2. 只有在开启事务的情况下才会有undo_log?
	3. 同一连接，事务不能嵌套，开启下一个事务时，上一个事务自动提交； 不同连接，一个连接的更改未提交，会导致另一个连接的事务执行阻塞； 以上在MySQL8.0测试

脏读： 读到了其他事务还未提交的内容
不可重复读： 读到了其他事务提交后的新内容，导致事务执行过程中读取的数据不一致

repeatable-read 在开启事务时启动了一个视图，
read committed 在执行sql语句时启动了一个视图，什么含义呢？就是说与上面相比，它是不可重复读的，每次执行sql语句创建的新视图有新值，
	读取到的不是旧视图的值。

事务隔离级别有四种：
	read uncommitted: 一个事务还未提交，它做的变更就能被别的事务看到
	read committed: 一个事务提交之后，它做的变更才能被其他事务看到
	repeatable-read: 一个事务在执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。
					此级别下，未提交变更对其他事务也是不可见的。
	serializable：对同一行数据，写加写锁，读加读锁，读写冲突时，后访问的事务必须等前一个事务执行完成，才能
					继续执行。



每个事务有一个唯一的事务ID，叫做transaction id，按申请顺序严格递增。
每行数据有多个版本，每个版本对应某个事务对该行做的更新，版本的事务ID
叫做row trx_id,
也就是说，数据表中的一行记录，其实可能有多个版本(row)，每个版本有自己的rowtrx_id。

事务启动瞬间，记录一个数组，保存当前正在活跃的所有事务id，活跃是指启动了但还没提交。


默认:  
postgre SELECT current_setting('default_transaction_isolation');
		read committed

mysql   show variables like '%tx_isolation%';
		REPEATABLE-READ


